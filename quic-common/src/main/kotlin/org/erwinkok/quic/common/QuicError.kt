package org.erwinkok.quic.common

enum class QuicError(val value: Int, val message: String) {
    NO_ERROR(0, "NO_ERROR"),
    INTERNAL_ERROR(1, "INTERNAL_ERROR"),
    CONNECTION_REFUSED(2, "CONNECTION_REFUSED"),
    FLOW_CONTROL_ERROR(3, "FLOW_CONTROL_ERROR"),
    STREAM_LIMIT_ERROR(4, "STREAM_LIMIT_ERROR"),
    STREAM_STATE_ERROR(5, "STREAM_STATE_ERROR"),
    FINAL_SIZE_ERROR(6, "FINAL_SIZE_ERROR"),
    FRAME_ENCODING_ERROR(7, "FRAME_ENCODING_ERROR"),
    TRANSPORT_PARAMETER_ERROR(8, "TRANSPORT_PARAMETER_ERROR"),
    CONNECTION_ID_LIMIT_ERROR(9, "CONNECTION_ID_LIMIT_ERROR"),
    PROTOCOL_VIOLATION(10, "PROTOCOL_VIOLATION"),
    INVALID_TOKEN(11, "INVALID_TOKEN"),
    APPLICATION_ERROR(12, "APPLICATION_ERROR"),
    CRYPTO_BUFFER_EXCEEDED(13, "CRYPTO_BUFFER_EXCEEDED"),
    KEY_UPDATE_ERROR(14, "KEY_UPDATE_ERROR"),
    AEAD_LIMIT_REACHED(15, "AEAD_LIMIT_REACHED"),
    NO_VIABLE_PATH(16, "NO_VIABLE_PATH"),
    VERSION_NEGOTIATION_ERROR(17, "VERSION_NEGOTIATION_ERROR"),
    ;

    companion object {
        fun errorString(error: Int): String {
            return entries.firstOrNull { it.value == error }?.message ?: "Unknown error: $error"
        }
    }
}
